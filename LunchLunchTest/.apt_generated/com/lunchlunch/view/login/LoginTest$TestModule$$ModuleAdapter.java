// Code generated by dagger-compiler.  Do not edit.
package com.lunchlunch.view.login;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class LoginTest$TestModule$$ModuleAdapter extends ModuleAdapter<LoginTest.TestModule> {
  private static final String[] INJECTS = { "members/com.lunchlunch.view.login.LoginTest", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { com.lunchlunch.webcomm.login.LoginHelperProvider.class, com.lunchlunch.controller.CommandDispatcherProvider.class, com.lunchlunch.view.DialogHandlerProvider.class, };

  public LoginTest$TestModule$$ModuleAdapter() {
    super(com.lunchlunch.view.login.LoginTest.TestModule.class, INJECTS, STATIC_INJECTIONS, true /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public LoginTest.TestModule newModule() {
    return new com.lunchlunch.view.login.LoginTest.TestModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, LoginTest.TestModule module) {
    bindings.contributeProvidesBinding("com.lunchlunch.view.DialogHandlerInterface", new ProvideDialogHandlerProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.lunchlunch.webcomm.login.LoginHelperInterface", new ProvideLoginHelperProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.lunchlunch.controller.CommandDispatcherInterface", new ProvideCommandDispatcherProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.lunchlunch.view.DialogHandlerInterface>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.lunchlunch.view.DialogHandlerInterface>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideDialogHandlerProvidesAdapter extends ProvidesBinding<com.lunchlunch.view.DialogHandlerInterface>
      implements Provider<com.lunchlunch.view.DialogHandlerInterface> {
    private final LoginTest.TestModule module;

    public ProvideDialogHandlerProvidesAdapter(LoginTest.TestModule module) {
      super("com.lunchlunch.view.DialogHandlerInterface", IS_SINGLETON, "com.lunchlunch.view.login.LoginTest.TestModule", "provideDialogHandler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.lunchlunch.view.DialogHandlerInterface>}.
     */
    @Override
    public com.lunchlunch.view.DialogHandlerInterface get() {
      return module.provideDialogHandler();
    }
  }

  /**
   * A {@code Binding<com.lunchlunch.webcomm.login.LoginHelperInterface>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.lunchlunch.webcomm.login.LoginHelperInterface>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideLoginHelperProvidesAdapter extends ProvidesBinding<com.lunchlunch.webcomm.login.LoginHelperInterface>
      implements Provider<com.lunchlunch.webcomm.login.LoginHelperInterface> {
    private final LoginTest.TestModule module;

    public ProvideLoginHelperProvidesAdapter(LoginTest.TestModule module) {
      super("com.lunchlunch.webcomm.login.LoginHelperInterface", IS_SINGLETON, "com.lunchlunch.view.login.LoginTest.TestModule", "provideLoginHelper");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.lunchlunch.webcomm.login.LoginHelperInterface>}.
     */
    @Override
    public com.lunchlunch.webcomm.login.LoginHelperInterface get() {
      return module.provideLoginHelper();
    }
  }

  /**
   * A {@code Binding<com.lunchlunch.controller.CommandDispatcherInterface>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.lunchlunch.controller.CommandDispatcherInterface>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideCommandDispatcherProvidesAdapter extends ProvidesBinding<com.lunchlunch.controller.CommandDispatcherInterface>
      implements Provider<com.lunchlunch.controller.CommandDispatcherInterface> {
    private final LoginTest.TestModule module;

    public ProvideCommandDispatcherProvidesAdapter(LoginTest.TestModule module) {
      super("com.lunchlunch.controller.CommandDispatcherInterface", IS_SINGLETON, "com.lunchlunch.view.login.LoginTest.TestModule", "provideCommandDispatcher");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.lunchlunch.controller.CommandDispatcherInterface>}.
     */
    @Override
    public com.lunchlunch.controller.CommandDispatcherInterface get() {
      return module.provideCommandDispatcher();
    }
  }
}
